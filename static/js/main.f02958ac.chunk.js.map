{"version":3,"sources":["Counter.js","NewCounter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","useState","modal","setModal","confirmation","setConfirmation","toggle","className","counter","name","onClick","countDecrease","id","class","count","countIncrease","countReset","Button","color","Modal","isOpen","ModalHeader","ModalBody","onChange","e","target","value","type","ModalFooter","countRemove","disabled","NewCounter","setName","setCount","newName","newCount","countAdd","App","counters","setTotalCount","console","log","newCounter","map","el","filter","reduce","acc","cur","Math","random","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f02958ac.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\n\nfunction Counter(props) {\n\n\n        const [modal, setModal] = useState(false);\n        const [confirmation, setConfirmation] = useState(false);\n        const toggle = () => setModal(!modal);\n        const verifyConfirmation = (e) => {\n            setConfirmation(e.target.value==props.counter.name) ;\n    }\n\n\n    return (\n        <div className=\"card mb-2\">\n            <div className=\"card-body\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {props.counter.name}\n                    </div>\n\n                    <div className=\"col\">\n                        <button onClick={() => props.countDecrease(props.counter.id)} class=\"btn btn-danger\">-</button>\n                        {props.counter.count}\n                        <button onClick={() => props.countIncrease(props.counter.id)} class=\"btn btn-success\">+</button>\n                        <button onClick={() => props.countReset(props.counter.id)} class=\"btn btn-outline-danger\">Reset\n                        </button>\n                    </div>\n                    <div className=\"col\">\n                            <div>\n                                <Button color=\"danger\" onClick={toggle} >Delete</Button>\n                                <Modal isOpen={modal} toggle={toggle} >\n                                    <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n                                    <ModalBody>\n                                      Confirm entering name <strong>{props.counter.name}</strong> to delete.\n                                        <input onChange={verifyConfirmation}\n                                                type=\"text\"/>\n                                    </ModalBody>\n                                    <ModalFooter>\n                                        <Button color=\"primary\" onClick={() => props.countRemove(props.counter.id)} disabled={!confirmation}>Confirm</Button>{' '}\n                                        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n                                    </ModalFooter>\n                                </Modal>\n                            </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import './App.css';\nimport React, {useState} from \"react\";\nimport ConfirmDeleteCounter from \"./ConfirmDeleteCounter\";\n\nfunction NewCounter(props) {\n\n    const [name, setName] = useState(\"--\")\n    const [count, setCount] = useState(\"22\")\n\n    const changeName = (e) =>{\n        const newName = e.target.value;\n        setName(newName)\n    }\n\n    const changeCount = (e) =>{\n        const newCount = e.target.value;\n        setCount(newCount)\n    }\n\n    const countAdd = () =>{\n        props.countAdd(name, count);\n        setName('');\n        setCount('')\n    }\n\n\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col\">\n\n            CounterName\n            <input type=\"text\"  class=\"form-control\" name=\"name\" value={name} id=\"\" onChange={changeName}/>\n                </div>\n                <div className=\"col\">\n            Count\n            <input type=\"text\"  class=\"form-control\" name=\"count\" value={count} id=\"\" onChange={changeCount}/>\n                </div>\n                <div className=\"col\">\n            <button class=\"btn btn-outline-secondary\" onClick={() => countAdd(name,count)}>Add</button>\n\n                </div>\n\n\n            </div>\n        </div>\n    );\n}\n\nexport default NewCounter;\n","\nimport './App.css';\nimport Counter from \"./Counter\";\nimport React, {useState} from \"react\";\nimport NewCounter from \"./NewCounter\";\nimport ConfirmDeleteCounter from \"./ConfirmDeleteCounter\";\n\nfunction App() {\n\n\n  const startCounters = [\n    {id: 1, name: 'Counter 1', count: 1},\n    {id: 2, name: 'Counter 2', count: 2},\n    {id: 3, name: 'Counter 3', count: 3},\n    {id: 4, name: 'Counter 4', count: 5},\n  ]\n\n\n  const [counters, setTotalCount] = useState(startCounters)\n\n  const countIncrease= (id) => {\n    console.log(id)\n    const newCounter = counters.map(el => (el.id===id)? {...el, count: el.count + 1}: el)\n    setTotalCount(newCounter)\n  }\n    const countDecrease= (id) => {\n      const newCounter = counters.map(el => (el.id===id)? {...el, count: el.count - 1}: el)\n      setTotalCount(newCounter)\n    }\n\n    const resetTotalCount = () =>{\n      const newCounter = counters.map(el => ({...el, count:0}))\n      setTotalCount(newCounter)\n    }\n\n    const countReset = (id) =>{\n      const newCounter = counters.map(el => (el.id===id)? {...el, count: 0}: el)\n      setTotalCount(newCounter)\n    }\n\n  const countRemove = (id) =>{\n    const newCounter = counters.filter(el => el.id !== id)\n    setTotalCount(newCounter)\n  }\n\n  const countAdd= (name, count) =>{\n\n    const newCounter = [...counters, {\n      id: Math.random(),\n      name:name,\n      count: Number(count),\n    }]\n    setTotalCount(newCounter);\n  }\n\n  return (\n    <div className=\"container\">\n      Total: {counters.reduce((acc, cur) => acc + cur.count, 0)}\n      <button onClick={resetTotalCount}>Reset</button>\n        {counters.map(el=><Counter key={el.id}\n                                   counter={el}\n                                   countIncrease={countIncrease}\n                                   countDecrease={countDecrease}\n                                   countReset={countReset}\n                                   countRemove={countRemove}/>\n            )}\n      <NewCounter countAdd={countAdd}/>\n      {/*<ConfirmDeleteCounter/>*/}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}