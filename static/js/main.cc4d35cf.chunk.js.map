{"version":3,"sources":["Counter.js","NewCounter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","counter","name","onClick","countDecrease","id","count","countIncrease","countReset","countRemove","NewCounter","useState","setName","setCount","type","value","onChange","e","newName","target","newCount","countAdd","App","counters","setTotalCount","console","log","newCounter","map","el","filter","className","reduce","acc","cur","Math","random","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc4d35cf.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\n\nfunction Counter(props) {\n\n\n    return (\n        <div>\n            {props.counter.name}\n\n            <button onClick={() => props.countDecrease(props.counter.id)}>-</button>\n\n            {props.counter.count}\n            <button onClick={() => props.countIncrease(props.counter.id)}>+</button>\n            <button onClick={() => props.countReset(props.counter.id)}>Reset</button>\n            <button onClick={() => props.countRemove(props.counter.id)}>Remove</button>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import './App.css';\nimport React, {useState} from \"react\";\n\nfunction NewCounter(props) {\n\n    const [name, setName] = useState(\"--\")\n    const [count, setCount] = useState(\"22\")\n\n    const changeName = (e) =>{\n        const newName = e.target.value;\n        setName(newName)\n    }\n\n    const changeCount = (e) =>{\n        const newCount = e.target.value;\n        setCount(newCount)\n    }\n\n    const countAdd = () =>{\n        props.countAdd(name, count);\n        setName('');\n        setCount('')\n    }\n\n\n    return (\n        <div>\n            CounterName\n            <input type=\"text\" name=\"name\" value={name} id=\"\" onChange={changeName}/>\n            Count\n            <input type=\"text\" name=\"count\" value={count} id=\"\" onChange={changeCount}/>\n            <button onClick={() => countAdd(name,count)}>Add</button>\n\n        </div>\n    );\n}\n\nexport default NewCounter;\n","\nimport './App.css';\nimport Counter from \"./Counter\";\nimport React, {useState} from \"react\";\nimport NewCounter from \"./NewCounter\";\n\nfunction App() {\n\n\n  const startCounters = [\n    {id: 1, name: 'Counter 1', count: 1},\n    {id: 2, name: 'Counter 2', count: 2},\n    {id: 3, name: 'Counter 3', count: 3},\n    {id: 4, name: 'Counter 4', count: 5},\n  ]\n\n\n  const [counters, setTotalCount] = useState(startCounters)\n\n  const countIncrease= (id) => {\n    console.log(id)\n    const newCounter = counters.map(el => (el.id===id)? {...el, count: el.count + 1}: el)\n    setTotalCount(newCounter)\n  }\n    const countDecrease= (id) => {\n      const newCounter = counters.map(el => (el.id===id)? {...el, count: el.count - 1}: el)\n      setTotalCount(newCounter)\n    }\n\n    const resetTotalCount = () =>{\n      const newCounter = counters.map(el => ({...el, count:0}))\n      setTotalCount(newCounter)\n    }\n\n    const countReset = (id) =>{\n      const newCounter = counters.map(el => (el.id===id)? {...el, count: 0}: el)\n      setTotalCount(newCounter)\n    }\n\n  const countRemove = (id) =>{\n    const newCounter = counters.filter(el => el.id !== id)\n    setTotalCount(newCounter)\n  }\n\n  const countAdd= (name, count) =>{\n\n    const newCounter = [...counters, {\n      id: Math.random(),\n      name:name,\n      count: Number(count),\n    }]\n    setTotalCount(newCounter);\n  }\n\n  return (\n    <div className=\"App\">\n      Total: {counters.reduce((acc, cur) => acc + cur.count, 0)}\n      <button onClick={resetTotalCount}>Reset</button>\n        {counters.map(el=><Counter key={el.id}\n                                   counter={el}\n                                   countIncrease={countIncrease}\n                                   countDecrease={countDecrease}\n                                   countReset={countReset}\n                                   countRemove={countRemove}/>\n            )}\n      <NewCounter countAdd={countAdd}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}